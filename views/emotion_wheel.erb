
 <style>
         .right {
        position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #E3F8FF;
  padding: 15px;
    }

      
#page {
  width: 50%;
  height: auto;
  min-height: 95%;
  background-color: whitesmoke;
  border-radius: 10px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
  padding: 20px;
  border: 2px solid #D8F3EC;
 
}



        #emotion-wheel {
          text-align: center;
          margin-top: 20px;
      }


      .wheel-title {
    font-size: 24px;
    color: #333;
    margin-bottom: 20px;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
}

.wheel-title:before,
.wheel-title:after {
    content: "";
    display: inline-block;
    vertical-align: middle;
    height: 0;
    width: 20px;
    border-top: 1px solid #333;
    margin: 0 10px;
}

.wheel-title:before {
    margin-right: 5px;
}

.wheel-title:after {
    margin-left: 5px;
}
  .color-info {
        height: 95%;
        width: 25%;
        flex: 1;
        padding: 20px;
        background-color: whitesmoke;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
        margin-left: 20px;
        margin-right: 5%;
        border: 2px solid #D8F3EC;
        overflow:hidden;
    }


    .color-info h2 {
        font-size: 24px;
        color: #333333;
        margin-bottom: 10px;
    }

    .color-info p {
        font-size: 16px;
        color: #555555;
        line-height: 1.5;
        margin-bottom: 15px;
    }


    .complimentary-color {
        height: 95%;
        width: 25%;
        flex: 1;
        padding: 20px;
        background-color: whitesmoke;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
        margin-left: 20px;
        margin-right: 20px; /* Added margin-right to create space */
        border: 2px solid #D8F3EC;
        overflow:hidden;
    }

    .complimentary-color h2 {
        font-size: 24px;
        color: #333333;
        margin-bottom: 10px;

    }

    .complimentary-color p {
        font-size: 16px;
        color: #555555;
        line-height: 1.5;
        margin-bottom: 15px;
    }

    #dark_overlay{
        display: none;
        position: absolute;
        width: 100%;
        min-width: 1000px;
        height: 100%;
        min-height: 1000px;
        background-color: #000000;
        opacity: 0.75;
        z-index: 1001;
    }

   #light_image {
  display: none;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 80%;
  max-width: 400px;
  background-color: #ffffff;
  z-index: 1002;
  border-radius: 10px;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
  padding: 20px;
  text-align: center;
}

#light_image h2 {
  font-size: 24px;
  color: #333;
}

#light_image form {
  margin-top: 20px;
}

#light_image textarea {
  max-width: 100%;
  max-height: 400px;
  padding: 10px;
  margin-bottom: 10px;
  border-radius: 5px;
  border: 1px solid #ccc;
}

#light_image button {
  background-color: #F2CDDC;
  color: #fff;
  border: none;
  padding: 10px 20px;
  font-size: 16px;
  border-radius: 5px;
  cursor: pointer;
}


.color-picker-container .picker-container .canvas-container {
  margin: 20px;
  position: relative;
  float: left;
  display: inline-block;
}

.color-picker-container .picker-container .canvas-container.active {
  display: block;
}

.color-picker-container .picker-container .canvas-container canvas {
  cursor: crosshair;
  border-radius: 50%;
  box-shadow: 0 0 0 4px #E8E8E8;
}

.color-picker-container .picker-container .canvas-container .pointer {
  width: 15px;
  height: 15px;
  border: 2px solid #fff;
  border-radius: 50%;
  position: absolute;
  pointer-events: none;
  background: hidden;
}
  .p{
    font-size:0.75vw;
  }
  a{
    font-size:0.75vw;
    color: darkblue;
  }

  #pick_color{
    text-align: center;
    position: relative;
    font-size:1vw;
  }


    h1 {
    /* Updated styles for h1 */
    font-size: 3vw;
    text-align: center;
    position: relative;
    padding-top: 1%;
    color: black;
  }

  h1::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%); /* Center horizontally */
    width: 80%;
    height: 2px;
    background-color: #000;
  }
    </style>
        <div id = "dark_overlay" onclick = "closeLightbox();">
    </div>
        

    <div class="right">
        <% if @current_user != nil %>
        <div id="light_image">
  <h2>Reflect</h2>
  <form action = "/reflection_process" method = "post">
    <label for="color"></label>
    <div id="color-picker"></div>
    <input type="hidden" name="rgb" id="rgb">

    <label for = "summary"></label>
    <textarea id = "summary" name = "summary" placeholder="Write your reflection here..."></textarea>
    <button type="submit">Submit</button>
  </form>
</div>
<%end %>
          <div class="complimentary-color">
        <h2>Complimentary Colors</h2>
        <hr>
        <p>Pairs of colors positioned opposite each other on the color wheel are known as complimentary colors. Such combinations create a striking contrast that enhance each other's visual impact when placed together. Through these colors, we can evoke certain emotions and reactions from viewers with our art.</p>
        <br>
        <p>In the world of emotions and feelings, complimentary colors play an important role. As artists, we can use them to create really fun, interesting visual dynamics that resonate with our feelings. For example, when paired together, red and green evoke a sense of balance and harmony, fostering feelings of calmness or stability. Meanwhile, high-contrast complimentary color combinations (i.e. purple and yellow), can ignite energy and excitement in our viewers, as some might associate these colors with passion and intensity.</p>
        <br>
        <p>Through our work, we can leverage different color pairings to dig deep into our emotions and share our feeligns through our work, communication how we are feeling <em>right now</em>. The combination of complimentary colors may influence how we interpret our artwork and affect our mood through the experience. Whether through the tranquil embrace of complimentary blues or more vibrant clashes, the relationship between colors poses a powerful tool in shaping the emotional impact of our visual compositions.</p>
    </div>
<div id = "page">
  <h1>Emotion Wheel</h1>
  <div id = "my_page">
     <div id="emotion-wheel">
        <div class="container">
          <div class="col">
            <div class="row">
              <div id="picker"></div>
            </div>
            <div class="row">
              <div id="preview"></div>
            </div>
          </div>
        </div>
      </div>
  </div>
<div id="pick_color">
  <p>Pick on the color coordinating with your emotions right now and write a brief reflection on why that will be saved to your dashboard (must<a href="/login"> create an account</a> first)</p>
</div>

</div>



    <div class="color-info">
        <h2>Analogous Colors</h2>
        <hr>
        <p>Analogous colors are groups of colors that are adjacent to each other on the color wheel. They have a harmonious and cohesive appearance when used together in a design or artwork. Imagine the color wheel as a spectrum of emotions. Analogous colors, like the progression from red to magenta to blue in the color wheel above, represent a gradual transition from one feeling to another. This subtle shift in hues can generate a smooth and pleasing visual experience that resonates with the subtleties of human emotions.</p>
        <p>For instance, blending analogous colors like green, yellow-green, and yellow can evoke a sense of nature and tranquility, mirroring the soothing calmness of a lush landscape. Conversely, utilizing analogous colors like orange, red-orange, and red could infuse a design with warmth and energy, reminiscent of a vibrant sunset.</p>
        
        <br>
        <p>The use of analogous colors isn't confined to aesthetics alone; it can also impact the way we perceive space and form. Applying analogous shades to different elements of a composition can create a seamless transition between them, resulting in a coherent and balanced arrangement.</p>
        <br>
        <p>Next time you embark on a creative project, consider the emotional and visual impact of analogous colors. By capitalizing on the inherent connection between these neighboring hues, you can craft a composition that speaks not only to the eyes but also to the heart.</p>
    </div>

</div>


</div>
</div>
<script>


    function closeLightbox(){
        var img = document.getElementById("light_image");
        img.src = "";
        img.alt = "";
        img.style.display = "none";
        document.getElementById("dark_overlay").style.display = "none";
    }



 var ColorPicker;

 (function() {

   function extend(defaults, options) {
     var extended = {};
     var prop;
     for (prop in defaults) {
       if (Object.prototype.hasOwnProperty.call(defaults, prop)) {
         extended[prop] = defaults[prop];
       }
     }
     for (prop in options) {
       if (Object.prototype.hasOwnProperty.call(options, prop)) {
         extended[prop] = options[prop];
       }
     }
     return extended;
   };


   ColorPicker = function(element, options) {

     this.options = extend({
       color: '#e7e7e7',
       palettes: ['#646fff', '#fffa1d', '#ffa21f', '#ff391d'],
       onUpdate: function() {}
     }, options);

     this.options.palettes.unshift(this.options.color);

     this.hex = this.options.color;
     this.rgb = this.HEXtoRGB(this.hex);
     this.hsv = this.RGBtoHSV(this.rgb[0], this.rgb[1], this.rgb[2]);
     this.dom = {};
     this.dom.container = document.createElement('div');
     this.dom.container.className = 'color-picker-container';

     element.appendChild(this.dom.container);

     this.initPicker();

     this.initPalettes();
   }




   ColorPicker.prototype.initPicker = function() {

     this.dom.picker = {};
     this.dom.picker.container = document.createElement('div');
     this.dom.picker.container.className = 'picker-container';

     this.dom.container.appendChild(this.dom.picker.container);

     this.dom.picker.canvas = {};

     this.dom.picker.canvas.container = document.createElement('div');
     this.dom.picker.canvas.container.className = 'canvas-container';
     this.dom.picker.container.appendChild(this.dom.picker.canvas.container);

     this.dom.picker.canvas.canvas = document.createElement('canvas');
     this.dom.picker.canvas.canvas.className = 'canvas';

     this.dom.picker.canvas.pointer = document.createElement('div');
     this.dom.picker.canvas.pointer.className = 'pointer';

     var ctx = this.dom.picker.canvas.canvas.getContext('2d'),
       image = new Image,
       $this = this,
       dragging = false;




     this.dom.picker.canvas.canvas.setAttribute('width', 650);
     this.dom.picker.canvas.canvas.setAttribute('height', 650);
     this.dom.picker.canvas.container.appendChild(this.dom.picker.canvas.canvas);
     this.dom.picker.canvas.container.appendChild(this.dom.picker.canvas.pointer);

      image.src = 'images/wheel.png';
     

image.onload = function() {
  // Calculate canvas dimensions as percentages
  const canvasWidthPercentage = 80; // for example, 80%
  const canvasHeightPercentage = 80; // for example, 80%
  
  const containerWidth = $this.dom.picker.canvas.container.clientWidth;
  const containerHeight = $this.dom.picker.canvas.container.clientHeight;

  const canvasWidth = (canvasWidthPercentage / 100) * containerWidth;
  const canvasHeight = (canvasHeightPercentage / 100) * containerHeight;

  // Set canvas dimensions using the calculated percentages
  $this.dom.picker.canvas.canvas.setAttribute('width', canvasWidth);
  $this.dom.picker.canvas.canvas.setAttribute('height', canvasHeight);

  $this.updateCanvasBounds();
  ctx.drawImage(image, 0, 0, canvasWidth, canvasHeight); // Use the calculated dimensions
  // Rest of your code...
};


     this.dom.picker.canvas.canvas.addEventListener('mousedown', function(e) { 
       e.preventDefault();
       dragging = true;
       $this.updateCoordinates(e.clientX, e.clientY);
       imageData = ctx.getImageData($this.x, $this.y, 1, 1);
       $this.updateColor(imageData.data);
       $this.hsv[2] = 1;
       $this.updateAll();
       console.log('Selected color:', $this.rgb);
       document.getElementById('rgb').value = $this.hex;

       /* show light box*/
       var small_img = document.getElementById("emotion-wheel");
        var big_img = document.getElementById("light_image");
        big_img.src = small_img.src;
        big_img.alt = small_img.alt;
        big_img.style.display = "block";
        document.getElementById("dark_overlay").style.display = "block";
     });


     this.initSlider();

   }



   ColorPicker.prototype.initSlider = function() {

     this.dom.slider = {};
     this.dom.slider.container = document.createElement('div');
     this.dom.slider.container.className = 'slider-container';

     this.dom.slider.slider = document.createElement('div');
     

     this.dom.slider.pointer = document.createElement('div');
     this.dom.slider.pointer.className = 'pointer';

     
     
     this.dom.picker.container.appendChild(this.dom.slider.container);

     this.dom.slider.slider.bounds = this.dom.slider.slider.getBoundingClientRect();
     this.dom.slider.pointer.bounds = this.dom.slider.pointer.getBoundingClientRect();
   };

   ColorPicker.prototype.updateColor = function(pixel) {
     this.hex = hex = this.RGBtoHEX(pixel[0], pixel[1], pixel[2]);
     this.hsv = this.RGBtoHSV(pixel[0], pixel[1], pixel[2]);
     this.rgb = [
       pixel[0],
       pixel[1],
       pixel[2]
     ];
   }

   ColorPicker.prototype.updateCoordinates = function(x, y) {
     var angle = Math.atan2((y - this.dom.picker.canvas.canvas.bounds.centerY), (x - this.dom.picker.canvas.canvas.bounds.centerX));
     radius = Math.sqrt(Math.pow(x - this.dom.picker.canvas.canvas.bounds.centerX, 2) + Math.pow(y - this.dom.picker.canvas.canvas.bounds.centerY, 2));
     if (radius > this.dom.picker.canvas.canvas.bounds.radius - (this.dom.picker.canvas.pointer.bounds.width / 2)) {
       cos = Math.cos(angle);
       sin = Math.sin(angle);
       x = cos * (this.dom.picker.canvas.canvas.bounds.radius - (this.dom.picker.canvas.pointer.bounds.width / 2)) + this.dom.picker.canvas.canvas.bounds.centerX;
       y = sin * (this.dom.picker.canvas.canvas.bounds.radius - (this.dom.picker.canvas.pointer.bounds.width / 2)) + this.dom.picker.canvas.canvas.bounds.centerY;
     }
     this.x = Math.floor(x - this.dom.picker.canvas.canvas.bounds.left);
     this.y = Math.floor(y - this.dom.picker.canvas.canvas.bounds.top);
   }


   ColorPicker.prototype.updateAll = function() {
     this.redrawSlider();
     this.updatePointers();
     this.options.onUpdate(this.rgb);
     if (this.selectedPalette) {
       this.selectedPalette.style.background = this.hex;
     }
   }
   ColorPicker.prototype.getPositionFromColor = function(color) {
     color = this.HEXtoRGB(color);
     if (color == null) {
       return null;
     }
     this.hsv = this.RGBtoHSV(color[0], color[1], color[2]);
     return this.getSVGPositionFromHS(this.hsv[0], this.hsv[1]);
   }



   ColorPicker.prototype.redrawSlider = function() {
     rgb = this.HSVtoRGB(this.hsv[0], this.hsv[1], 1);
     hex = this.RGBtoHEX(rgb[0], rgb[1], rgb[2]);
     gradient = this.makeGradient(hex, '#000');
     this.dom.slider.slider.setAttribute('style', gradient);
     this.updatePointers();
   };

   ColorPicker.prototype.updatePointers = function() {
     if (this.dom.picker.canvas.pointer.bounds) {
       this.dom.picker.canvas.pointer.style.left = this.x - (this.dom.picker.canvas.pointer.bounds.width / 2) + 'px';
       this.dom.picker.canvas.pointer.style.top = this.y - (this.dom.picker.canvas.pointer.bounds.height / 2) + 'px';
     }
     if (this.dom.slider.slider.bounds) {
       position = this.dom.slider.slider.bounds.height * (1 - this.hsv[2]) - (this.dom.slider.pointer.bounds.height / 2);
       this.dom.slider.pointer.style.top = position + 'px';
     }
   }

   ColorPicker.prototype.updateCanvasBounds = function() {
       this.dom.picker.canvas.canvas.bounds = this.dom.picker.canvas.canvas.getBoundingClientRect();
       this.dom.picker.canvas.pointer.bounds = this.dom.picker.canvas.pointer.getBoundingClientRect();
       this.dom.picker.canvas.canvas.bounds.centerX = this.dom.picker.canvas.canvas.bounds.left + (this.dom.picker.canvas.canvas.bounds.width / 2);
       this.dom.picker.canvas.canvas.bounds.centerY = this.dom.picker.canvas.canvas.bounds.top + (this.dom.picker.canvas.canvas.bounds.height / 2);
       this.dom.picker.canvas.canvas.bounds.radius = this.dom.picker.canvas.canvas.bounds.width / 2;
     }

   ColorPicker.prototype.getSVGPositionFromHS = function(h, s) {
     var hue = this.scientificToArtisticSmooth(h * 360);
     var theta = hue * (Math.PI / 180);
     var y = Math.sin(theta) * this.dom.picker.canvas.canvas.bounds.radius * s;
     var x = Math.cos(theta) * this.dom.picker.canvas.canvas.bounds.radius * s;
     return {
       x: x + this.dom.picker.canvas.canvas.bounds.radius,
       y: this.dom.picker.canvas.canvas.bounds.radius - y
     }

   };


   ColorPicker.prototype.scientificToArtisticSmooth = function(hue) {
     return (
       hue < 35 ? hue * (60 / 35) :
       hue < 60 ? this.mapRange(hue, 35, 60, 60, 122) :
       hue < 120 ? this.mapRange(hue, 60, 120, 122, 165) :
       hue < 180 ? this.mapRange(hue, 120, 180, 165, 218) :
       hue < 240 ? this.mapRange(hue, 180, 240, 218, 275) :
       hue < 300 ? this.mapRange(hue, 240, 300, 275, 330) :
       this.mapRange(hue, 300, 360, 330, 360));
   }


   ColorPicker.prototype.mapRange = function(value, fromLower, fromUpper, toLower, toUpper) {
     return (toLower + (value - fromLower) * ((toUpper - toLower) / (fromUpper - fromLower)));
   }


   ColorPicker.prototype.HEXtoRGB = function(hex) {
     var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
     return result ? [
       parseInt(result[1], 16),
       parseInt(result[2], 16),
       parseInt(result[3], 16)
     ] : null;
   }


   ColorPicker.prototype.RGBtoHSV = function(r, g, b) {
     r = r / 255, g = g / 255, b = b / 255;
     var max = Math.max(r, g, b),
       min = Math.min(r, g, b);
     var h, s, v = max;

     var d = max - min;
     s = max == 0 ? 0 : d / max;

     if (max == min) {
       h = 0; 
     } else {
       switch (max) {
         case r:
           h = (g - b) / d + (g < b ? 6 : 0);
           break;
         case g:
           h = (b - r) / d + 2;
           break;
         case b:
           h = (r - g) / d + 4;
           break;
       }
       h /= 6;
     }
     return [h, s, v];
   }


   ColorPicker.prototype.HSVtoRGB = function(h, s, v) {
     var r, g, b;
     var i = Math.floor(h * 6);
     var f = h * 6 - i;
     var p = v * (1 - s);
     var q = v * (1 - f * s);
     var t = v * (1 - (1 - f) * s);
     switch (i % 6) {
       case 0:
         r = v, g = t, b = p;
         break;
       case 1:
         r = q, g = v, b = p;
         break;
       case 2:
         r = p, g = v, b = t;
         break;
       case 3:
         r = p, g = q, b = v;
         break;
       case 4:
         r = t, g = p, b = v;
         break;
       case 5:
         r = v, g = p, b = q;
         break;
     }
     return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
   }


   ColorPicker.prototype.RGBtoHEX = function(r, g, b) {
     function componentToHex(c) {
       var hex = c.toString(16);
       return hex.length == 1 ? "0" + hex : hex;
     }
     return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
   }

   
   ColorPicker.prototype.makeGradient = function(colour1, colour2) {
     var gradientString = '\
            /* Mozilla Firefox */ \
            background-image: -moz-linear-gradient(top, {colour1} 0%, {colour2} 100%);\
            /* Opera */ \
            background-image: -o-linear-gradient(top, {colour1} 0%, {colour2} 100%);\
            /* Webkit (Safari/Chrome 10) */ \
            background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0, {colour1}), color-stop(1, {colour2}));\
            /* Webkit (Chrome 11+) */ \
            background-image: -webkit-linear-gradient(top, {colour1} 0%, {colour2} 100%);\
            /* IE10+ */\
            background: -ms-linear-gradient(top,  {colour1} 0%,{colour2} 100%);\
            /* W3C */\
            background: linear-gradient(top,  {colour1} 0%,{colour2} 100%);\
        ';

     return gradientString.replace(/\{colour1\}/g, colour1).replace(/\{colour2\}/g, colour2)
   };
 }());

var colorPreview = document.getElementById('preview');

 var picker = new ColorPicker(document.getElementById('picker'), {
   onUpdate: function(rgb) {
     colorPreview.style.background = "rgb(" + rgb[0] + ", " + rgb[1] + ", " + rgb[2] + ")";
   }
 });



</script>

